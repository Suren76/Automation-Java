package am.list.pageobjects;

import am.list.components.Item;
import am.list.components.CategoryBar;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;

import java.util.ArrayList;
import java.util.List;

public class ResultPage extends BasePage<ResultPage> {

    String dropDownFieldXpath = "//div[@class='filter']//form//div[text()='%s' ]/following-sibling::div";
    By itemsXpath = By.xpath("//a[contains(@href, '/item/')]");

    public ResultPage(WebDriver driver) {
        super(driver, "");
    }

    public ResultPage(WebDriver driver, String endPoint) {
        super(driver, endPoint);
    }

    public WebElement getLastItem() {
        List<WebElement> items = driver.findElements(itemsXpath);
        return items.get(items.size() - 1);
    }

    public List<Item> items() {
        List<Item> itemsList = new ArrayList<>();
        for (WebElement item : driver.findElements(itemsXpath)) {
            itemsList.add(new Item(item));
        }
        return itemsList;
    }

    public void addDummyItem() {
        addDummyItem(
                "Dummy Element",
                "https://cdn3.vectorstock.com/i/1000x1000/65/02/bug-in-code-vector-12486502.jpg",
                "$000,000",
                "Yo, there is bug in code.",
                "Element generated by automation script to check tests correct work."
        );
    }

    public void addDummyItem(String label, String imageSrc, String price, String description, String location) {
        addDummyItem(driver.findElement(By.xpath("//div[@id='tp']//div[@class='gl']")), label, imageSrc, price, description, location);
    }

    private void addDummyItem(WebElement elem, String label, String imageSrc, String price, String description, String location) {
        JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;
        jsExecutor.executeScript("item = document.createElement('a')");
        jsExecutor.executeScript("item.setAttribute('href', '/en/item/')");
        jsExecutor.executeScript("item.setAttribute('class', 'h')");
        jsExecutor.executeScript("item.setAttribute('target', '_blank')");

        jsExecutor.executeScript("label = document.createElement('label')");
        jsExecutor.executeScript("label.setAttribute('class', 'clabel')");
        jsExecutor.executeScript("label.appendChild(document.createTextNode('%s'))".formatted(label));

        jsExecutor.executeScript("image = document.createElement('img')");
        jsExecutor.executeScript("image.setAttribute('src', '%s')".formatted(imageSrc));

        jsExecutor.executeScript("price = document.createElement('div')");
        jsExecutor.executeScript("price.setAttribute('class', 'p')");
        jsExecutor.executeScript("price.appendChild(document.createTextNode('%s'))".formatted(price));

        jsExecutor.executeScript("description = document.createElement('div')");
        jsExecutor.executeScript("description.setAttribute('class', 'l')");
        jsExecutor.executeScript("description.appendChild(document.createTextNode('%s'))".formatted(description));

        jsExecutor.executeScript("loc = document.createElement('div')");
        jsExecutor.executeScript("loc.setAttribute('class', 'at')");
        jsExecutor.executeScript("loc.appendChild(document.createTextNode('%s'))".formatted(location));

        jsExecutor.executeScript("item.appendChild(label)");
        jsExecutor.executeScript("item.appendChild(image)");
        jsExecutor.executeScript("item.appendChild(price)");
        jsExecutor.executeScript("item.appendChild(description)");
        jsExecutor.executeScript("item.appendChild(loc)");


        jsExecutor.executeScript("arguments[0].appendChild(item)", elem);
    }

    // ? why I need this method?
    private void waitTillPageLoads() {
        shortWait().until(ExpectedConditions.presenceOfAllElementsLocatedBy(itemsXpath));
    }

    public ResultPage selectCategory(String categoryMenu) {
        return new CategoryBar(driver).selectCategory(categoryMenu);
    }

    public ResultPage selectCategory(String categoryMenu, String subCategory) {
        return new CategoryBar(driver).selectCategory(categoryMenu, subCategory);
    }

    public ResultPage selectCategory(String categoryMenu, String subCategoryTitle, String subCategory) {
        return new CategoryBar(driver).selectCategory(categoryMenu, subCategoryTitle, subCategory);
    }

    public void addFilterRadioButtonSelect(String fieldName) {
        WebElement checkboxFilterSection = driver.findElement(By.xpath("//div[@class='filter']//form/div[1]"));
        checkboxFilterSection.findElement(By.xpath(".//label[text()='%s']".formatted(fieldName))).click();
        waitTillPageLoads();
    }

    public void addFilterInput(String fieldTitle, String fieldValueFrom, String fieldValueTo) {
        WebElement checkboxFilterSection = driver.findElement(By.xpath(dropDownFieldXpath.formatted(fieldTitle)));

        checkboxFilterSection.findElement(By.xpath(".//input[1]")).sendKeys(fieldValueFrom);
        checkboxFilterSection.findElement(By.xpath(".//input[2]")).sendKeys(fieldValueTo);

        checkboxFilterSection.findElement(By.xpath(".//a")).click();
        waitTillPageLoads();
    }

    public void addFilterInputDropdown(String fieldTitle, String fieldValueFrom, String fieldValueTo) {
        WebElement checkboxFilterSection = driver.findElement(By.xpath(dropDownFieldXpath.formatted(fieldTitle)));

        checkboxFilterSection.findElement(By.xpath(".//div[1]/div[contains(@class,'me')]")).click();
        checkboxFilterSection.findElement(By.xpath(".//div[1]/div[contains(@class,'l')]//div[text()='%s']".formatted(fieldValueFrom))).click();

        checkboxFilterSection.findElement(By.xpath(".//div[2]/div[contains(@class,'me')]")).click();
        checkboxFilterSection.findElement(By.xpath(".//div[2]/div[contains(@class,'l')]//div[text()='%s']".formatted(fieldValueFrom))).click();
        waitTillPageLoads();
    }

    public void addFilterDropDownCheckbox(String fieldTitle, String[] fieldsName) {
        WebElement dropdownFilterSection = driver.findElement(By.xpath((dropDownFieldXpath + "/div").formatted(fieldTitle)));
        dropdownFilterSection.findElement(By.xpath(".//div[@class='me']")).click();

        for (String fieldName : fieldsName) {
            dropdownFilterSection.findElement(By.xpath(".//div[contains(@class,'l')]/div[text()='%s']".formatted(fieldName))).click();
        }
        dropdownFilterSection.findElement(By.xpath(".//div[contains(@class,'l')]//div[@class='bt']/div[1]")).click();
        waitTillPageLoads();
    }

    public void addFilterDropDownSelect(String fieldTitle, String fieldName) {
        WebElement dropdownFilterSection = driver.findElement(By.xpath((dropDownFieldXpath).formatted(fieldTitle)));

        dropdownFilterSection.findElement(By.xpath(".//div[@class='me']")).click();
        dropdownFilterSection.findElement(By.xpath(".//div[contains(@class,'l')]/div[contains(text(),'%s')]".formatted(fieldName))).click();
        waitTillPageLoads();
    }

    @Override
    protected void load() {
        System.out.println("ResultPage.load()");
    }

    @Override
    protected void isLoaded() throws Error {
        if (!(driver.findElements(itemsXpath).size() > 0)) {
            throw new Error("The page is not loaded!");
        }
    }

}
